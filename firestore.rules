rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // ========================================
    // REGRAS TEMPOR√ÅRIAS - BIOESTAT PLATFORM
    // ========================================
    // Vers√£o tempor√°ria mais permissiva para resolver problemas de login
    // Sistema educacional para avalia√ß√£o nutricional - UNICAMP
    // ========================================

    // ========================================
    // FUN√á√ïES AUXILIARES SIMPLIFICADAS
    // ========================================

    // Fun√ß√£o para verificar se o usu√°rio est√° autenticado
    function isAuthenticated() {
      return request.auth != null;
    }

    // Fun√ß√£o para verificar email institucional (mais permissiva)
    function hasInstitutionalEmail() {
      return isAuthenticated() &&
        (request.auth.token.email.matches('.*@dac\\.unicamp\\.br') ||
         request.auth.token.email.matches('.*@unicamp\\.br') ||
         request.auth.token.email.matches('.*@gmail\\.com') ||
         request.auth.token.email.matches('.*@hotmail\\.com') ||
         request.auth.token.email.matches('.*@outlook\\.com')); // Mais emails para desenvolvimento
    }

    // Fun√ß√£o para verificar se √© o pr√≥prio usu√°rio
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Fun√ß√£o simplificada para verificar se √© professor
    function isProfessor() {
      return isAuthenticated() && (
        // Custom claims (quando dispon√≠vel)
        request.auth.token.role == 'professor' ||
        // Fallback: email espec√≠fico de professores ou dom√≠nio institucional
        request.auth.token.email.matches('.*@unicamp\\.br') ||
        request.auth.token.email.matches('.*@dac\\.unicamp\\.br') ||
        // Tempor√°rio: permitir emails gmail para desenvolvimento
        request.auth.token.email.matches('.*@gmail\\.com')
      );
    }

    // Fun√ß√£o para verificar se √© estudante
    function isStudent() {
      return hasInstitutionalEmail() && (
        request.auth.token.role == 'student' ||
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'student') ||
        !request.auth.token.email.matches('.*@unicamp\\.br') // N√£o professores s√£o estudantes
      );
    }

    // ========================================
    // COLE√á√ïES PRINCIPAIS - CONTROLE ESPEC√çFICO
    // ========================================

    // USERS COLLECTION - Perfis de usu√°rios (ACESSO CONTROLADO)
    match /users/{userId} {
      // ‚úÖ Usu√°rios podem ver e editar apenas seus pr√≥prios dados
      allow read, update: if isAuthenticated() && isOwner(userId);
      
      // ‚úÖ Professores podem ver dados de todos os usu√°rios (sem editar)
      allow read: if isProfessor();
      
      // ‚úÖ Permitir cria√ß√£o de conta com valida√ß√£o
      allow create: if hasInstitutionalEmail() && 
        request.resource.data.keys().hasAll(['role', 'email']) &&
        request.resource.data.role in ['professor', 'student'] &&
        request.auth.uid == userId;
    }

    // QUIZ ATTEMPTS - Tentativas de quiz (PROTE√á√ÉO CR√çTICA)
    match /quiz_attempts/{attemptId} {
      // ‚úÖ Estudantes podem apenas criar e ler suas pr√≥prias tentativas
      allow read, create: if isAuthenticated() && 
        request.resource.data.studentId == request.auth.uid;
        
      // ‚úÖ Professores podem ler todas as tentativas (an√°lise)
      allow read: if isProfessor();
      
      // üö´ NINGU√âM pode editar tentativas ap√≥s cria√ß√£o (integridade)
      allow update, delete: if false;
    }

    // UNIFIED SCORES - Sistema de pontua√ß√£o (PROTE√á√ÉO CR√çTICA)
    match /unified_scores/{studentId} {
      // ‚úÖ Estudantes podem ler e atualizar sua pr√≥pria pontua√ß√£o
      allow read: if isAuthenticated() && isOwner(studentId);
      allow write: if isAuthenticated() && isOwner(studentId);
      
      // ‚úÖ Professores podem ler todas as pontua√ß√µes
      allow read: if isProfessor();
    }

    // CLASSES - Turmas (CONTROLE TEMPOR√ÅRIO MAIS PERMISSIVO)
    match /classes/{classId} {
      // ‚úÖ Todos os usu√°rios autenticados podem ler turmas
      allow read: if isAuthenticated();
      
      // ‚úÖ Professores podem gerenciar todas as turmas (tempor√°rio)
      allow write, delete, create: if isProfessor();
      
      // ‚úÖ Usu√°rios autenticados podem criar turmas (tempor√°rio para debugging)
      allow create: if isAuthenticated();
    }

    // CLASS STUDENTS - Matr√≠culas (CONTROLE OTIMIZADO)
    match /classStudents/{enrollmentId} {
      // ‚úÖ Todos os usu√°rios autenticados podem ler matr√≠culas
      allow read: if isAuthenticated();

      // ‚úÖ Estudantes podem criar sua pr√≥pria matr√≠cula
      allow create: if isAuthenticated() &&
        request.resource.data.studentId == request.auth.uid;

      // ‚úÖ Professores podem gerenciar todas as matr√≠culas
      allow write, delete: if isProfessor();

      // ‚úÖ Estudantes podem atualizar apenas sua pr√≥pria matr√≠cula (campos espec√≠ficos)
      allow update: if isAuthenticated() &&
        resource.data.studentId == request.auth.uid &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['lastActivity', 'status']);
    }

    // MODULES - M√≥dulos educacionais (ACESSO EDUCACIONAL)
    match /modules/{moduleId} {
      // ‚úÖ Todos os usu√°rios autenticados podem ler m√≥dulos
      allow read: if isAuthenticated();
      
      // ‚úÖ Apenas professores podem criar/editar m√≥dulos
      allow write: if isProfessor();
    }

    // STUDENT PROGRESS - Progresso dos estudantes (PROTE√á√ÉO DE DADOS)
    match /student_module_progress/{progressId} {
      // ‚úÖ Estudantes podem ler/escrever apenas seu pr√≥prio progresso
      allow read, write: if isAuthenticated() && 
        (resource.data.studentId == request.auth.uid ||
         progressId.split('_')[0] == request.auth.uid);
         
      // ‚úÖ Professores podem ler todo o progresso
      allow read: if isProfessor();
      
      // ‚úÖ Permitir cria√ß√£o para o pr√≥prio usu√°rio
      allow create: if isAuthenticated() && 
        request.resource.data.studentId == request.auth.uid;
    }

    // STUDENT EXERCISE PROGRESS - Progresso detalhado dos exerc√≠cios
    match /student_exercise_progress/{progressId} {
      // ‚úÖ Estudantes podem ler/escrever apenas seu pr√≥prio progresso
      allow read, write: if isAuthenticated() && 
        (resource.data.studentId == request.auth.uid ||
         progressId.split('_')[0] == request.auth.uid);
         
      // ‚úÖ Professores podem ler todo o progresso
      allow read: if isProfessor();
      
      // ‚úÖ Permitir cria√ß√£o para o pr√≥prio usu√°rio
      allow create: if isAuthenticated() && 
        request.resource.data.studentId == request.auth.uid;
    }

    // USER PROGRESS - Progresso geral dos usu√°rios (SISTEMA UNIFICADO)
    match /user_progress/{userId} {
      // ‚úÖ Usu√°rios podem ler/escrever apenas seu pr√≥prio progresso
      allow read, write: if isAuthenticated() && isOwner(userId);
      
      // ‚úÖ Professores podem ler todo o progresso
      allow read: if isProfessor();
      
      // ‚úÖ Permitir cria√ß√£o para o pr√≥prio usu√°rio
      allow create: if isAuthenticated() && isOwner(userId);
    }

    // RANKINGS - Sistema de classifica√ß√£o (SOMENTE LEITURA)
    match /{rankingCollection}/{rankingId} {
      // ‚úÖ Todos podem ler rankings (motiva√ß√£o)
      allow read: if isAuthenticated() && 
        rankingCollection.matches('.*[Rr]anking.*');
        
      // üö´ Apenas sistema pode escrever rankings
      allow write: if false;
    }

    // NUTRITIONAL DATASETS - Dados brasileiros (ACESSO CONTROLADO)
    match /nutritional_datasets/{datasetId} {
      // ‚úÖ Usu√°rios autenticados podem ler datasets para exerc√≠cios
      allow read: if isAuthenticated();
      
      // ‚úÖ Apenas professores podem adicionar/editar datasets
      allow write: if isProfessor();
    }

    // ANALYTICS - Dados anal√≠ticos (PROFESSORES APENAS)
    match /{analyticsCollection}/{docId} {
      // ‚úÖ Apenas professores podem acessar analytics
      allow read, write: if isProfessor() && 
        analyticsCollection.matches('.*[Aa]nalytics.*');
    }

    // NOTIFICATIONS - Sistema de notifica√ß√µes (CONTROLE PESSOAL)
    match /notifications/{notificationId} {
      // ‚úÖ Usu√°rios podem ler apenas suas pr√≥prias notifica√ß√µes
      allow read: if isAuthenticated() && 
        resource.data.recipientId == request.auth.uid;
        
      // ‚úÖ Professores podem criar notifica√ß√µes
      allow create: if isProfessor();
      
      // ‚úÖ Usu√°rios podem marcar como lidas
      allow update: if isAuthenticated() && 
        resource.data.recipientId == request.auth.uid &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read', 'readAt']);
    }

    // RANDOMIZED QUIZZES - Quizzes aleat√≥rios (ACESSO DO ESTUDANTE)
    match /randomized_quizzes/{quizId} {
      // ‚úÖ Estudantes podem criar e ler seus pr√≥prios quizzes
      allow read, create: if isStudent() && 
        request.resource.data.studentId == request.auth.uid;
        
      // ‚úÖ Professores podem ler todos os quizzes
      allow read: if isProfessor();
    }

    // QUIZ SESSIONS - Sess√µes ativas de quiz (ACESSO DO ESTUDANTE)
    match /quiz_sessions/{sessionId} {
      // ‚úÖ Estudantes podem gerenciar suas pr√≥prias sess√µes
      allow read, write, create, delete: if isStudent() &&
        (request.resource.data.studentId == request.auth.uid ||
         sessionId.split('_')[0] == request.auth.uid);
         
      // ‚úÖ Professores podem ler todas as sess√µes
      allow read: if isProfessor();
    }

    // HEALTH CHECK - Monitoramento do sistema
    match /_health/{docId} {
      allow read: if isAuthenticated();
      allow write: if false;
    }

    // SYSTEM ALERTS - Alertas do sistema (PROFESSORES)
    match /alerts/{alertId} {
      // ‚úÖ Professores podem ler alertas direcionados a eles
      allow read: if isProfessor() && 
        resource.data.recipientId == request.auth.uid;
        
      // ‚úÖ Sistema pode criar alertas
      allow create: if isAuthenticated();
      
      // ‚úÖ Professores podem marcar alertas como lidos
      allow update: if isProfessor() && 
        resource.data.recipientId == request.auth.uid &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read', 'readAt']);
    }

    // SYSTEM HEALTH METRICS - M√©tricas de sa√∫de do sistema
    match /system_health_metrics/{metricId} {
      // ‚úÖ Professores podem ler m√©tricas de sa√∫de
      allow read: if isProfessor();
      
      // ‚úÖ Sistema pode criar/atualizar m√©tricas
      allow write: if isAuthenticated();
    }

    // CLASS LOGS - Logs de atividades das turmas
    match /class_logs/{logId} {
      // ‚úÖ Professores podem ler logs das turmas
      allow read: if isProfessor();
      
      // ‚úÖ Sistema pode criar logs
      allow create: if isAuthenticated();
    }

    // ========================================
    // COLE√á√ïES GERAIS - CONTROLE B√ÅSICO
    // ========================================

    // Cole√ß√µes de configura√ß√£o e sistema (PROFESSORES)
    match /{collection}/{document} {
      allow read, write: if isProfessor() && 
        (collection == 'settings' || 
         collection == 'system_health' ||
         collection == 'audit_logs' ||
         collection.matches('.*[Ss]ystem.*'));
    }

    // DELETED CLASSES - Lixeira de turmas (ACESSO DE PROFESSORES)
    match /deleted_classes/{classId} {
      // ‚úÖ Professores podem ver e gerenciar turmas na lixeira
      allow read, write: if isProfessor();

      // ‚úÖ Permitir cria√ß√£o quando turma √© exclu√≠da
      allow create: if isProfessor();
    }

    // CLASS INVITES - C√≥digos de convite das turmas (ACESSO OTIMIZADO)
    match /classInvites/{inviteCode} {
      // ‚úÖ Professores podem criar convites
      allow create: if isProfessor() &&
        request.resource.data.keys().hasAll(['classId', 'code', 'createdBy']) &&
        request.resource.data.createdBy == request.auth.uid;

      // ‚úÖ Todos os usu√°rios autenticados podem ler convites (necess√°rio para valida√ß√£o)
      allow read: if isAuthenticated();

      // ‚úÖ Sistema pode atualizar contadores de uso (currentUses, lastUsed)
      allow update: if isAuthenticated() &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['currentUses', 'lastUsed']);

      // ‚úÖ Professores podem atualizar convites que criaram
      allow update: if isProfessor() &&
        resource.data.createdBy == request.auth.uid;

      // üö´ Ningu√©m pode deletar convites (integridade hist√≥rica)
      allow delete: if false;
    }

    // ========================================
    // COLE√á√ïES GERAIS - CONTROLE B√ÅSICO
    // ========================================

    // Cole√ß√µes de configura√ß√£o e sistema (PROFESSORES)
    match /{collection}/{document} {
      allow read, write: if isProfessor() &&
        (collection == 'settings' ||
         collection == 'system_health' ||
         collection == 'audit_logs' ||
         collection.matches('.*[Ss]ystem.*'));
    }

    // Cole√ß√µes de estudantes e dados gerais (ACESSO CONTROLADO)
    match /{collection}/{document} {
      // ‚úÖ Usu√°rios autenticados podem ler dados gerais
      allow read: if isAuthenticated();

      // ‚úÖ Professores podem gerenciar dados do sistema
      allow write, create, update: if isProfessor();

      // ‚úÖ Estudantes podem atualizar seus pr√≥prios dados
      allow update: if isAuthenticated() &&
        (collection == 'unified_scores' && document == request.auth.uid);
    }
  }
}