// Exemplos de Uso do Student Data Reset Script
// Guia pr√°tico para usar o script de reset de dados dos estudantes
// Created by Ellis Abhulime - UNICAMP

import StudentDataResetScript from './studentDataResetScript'

/**
 * üéØ EXEMPLOS DE USO B√ÅSICO
 */

// 1. Verificar status do sistema antes de qualquer opera√ß√£o
export async function checkSystemStatus() {
  console.log('üìä Verificando status do sistema...')
  
  const status = await StudentDataResetScript.getSystemStatus()
  
  if (status.systemHealth === 'critical') {
    console.error('üö® SISTEMA CR√çTICO - N√ÉO EXECUTE RESET!')
    return false
  }
  
  console.log(`‚úÖ Sistema OK: ${status.professors} professores, ${status.students} estudantes`)
  return true
}

// 2. Executar teste completo antes do reset real
export async function runFullTest() {
  console.log('üß™ Executando teste completo...')
  
  const testResults = await StudentDataResetScript.runComprehensiveTest()
  
  console.log('üìã Recomenda√ß√µes do teste:')
  testResults.recommendations.forEach(rec => console.log(`  ${rec}`))
  
  const isReady = testResults.recommendations.every(rec => 
    !rec.includes('‚ùå') && !rec.includes('üö®')
  )
  
  if (isReady) {
    console.log('‚úÖ Sistema pronto para reset!')
  } else {
    console.log('‚ö†Ô∏è Corrigir problemas antes de executar reset')
  }
  
  return testResults
}

// 3. Executar reset com backup (dry run primeiro)
export async function executeResetWithBackup() {
  console.log('üöÄ Executando reset com backup...')
  
  try {
    // Primeiro: Dry run para testar
    console.log('1Ô∏è‚É£ Executando dry run...')
    const dryRunReport = await StudentDataResetScript.executeQuickReset(true)
    
    if (dryRunReport.totalErrors > 0) {
      console.error('‚ùå Erros no dry run - cancelando')
      return false
    }
    
    console.log(`‚úÖ Dry run OK: ${dryRunReport.totalDocumentsFound} documentos seriam deletados`)
    
    // Segundo: Confirmar execu√ß√£o real
    const userConfirmed = confirm(`
      üö® ATEN√á√ÉO: Esta opera√ß√£o ir√° DELETAR PERMANENTEMENTE ${dryRunReport.totalDocumentsFound} documentos!
      
      Dados que ser√£o removidos:
      - ${dryRunReport.results.find(r => r.collection === 'users')?.documentsFound || 0} contas de estudantes
      - Todos os progressos e pontua√ß√µes
      - Todas as tentativas de exerc√≠cios
      
      Deseja continuar? Esta a√ß√£o N√ÉO PODE SER DESFEITA!
    `)
    
    if (!userConfirmed) {
      console.log('‚ùå Opera√ß√£o cancelada pelo usu√°rio')
      return false
    }
    
    // Terceiro: Executar reset real
    console.log('2Ô∏è‚É£ Executando reset real...')
    const finalReport = await StudentDataResetScript.executeQuickReset(false)
    
    console.log(`‚úÖ Reset conclu√≠do: ${finalReport.totalDocumentsDeleted} documentos deletados`)
    
    return finalReport
    
  } catch (error) {
    console.error('‚ùå Erro durante reset:', error)
    return false
  }
}

// 4. Verificar depend√™ncias antes de executar
export async function checkDependencies() {
  console.log('üîß Verificando depend√™ncias...')
  
  const deps = await StudentDataResetScript.checkDependencies()
  
  if (!deps.firebaseConnected) {
    console.error('‚ùå Firebase n√£o conectado!')
    return false
  }
  
  if (!deps.permissionsOk) {
    console.error('‚ùå Problemas de permiss√£o!')
    console.log('Cole√ß√µes inacess√≠veis:', deps.collectionsInaccessible)
    return false
  }
  
  console.log(`‚úÖ Depend√™ncias OK - Tempo estimado: ${deps.estimatedExecutionTime}s`)
  return true
}

/**
 * üéØ EXEMPLOS DE USO AVAN√áADO
 */

// 5. Reset customizado com configura√ß√£o espec√≠fica
export async function customReset() {
  console.log('‚öôÔ∏è Executando reset customizado...')
  
  const script = new StudentDataResetScript({
    dryRun: false, // ‚ö†Ô∏è PRODU√á√ÉO
    createBackup: true,
    validateBeforeDelete: true,
    logLevel: 'verbose',
    confirmationRequired: true,
    batchSize: 50, // Menor para sistemas lentos
    preserveSystemData: true
  })
  
  const report = await script.executeReset()
  
  console.log('üìä Relat√≥rio customizado:')
  console.table({
    'Cole√ß√µes': report.totalCollections,
    'Docs Encontrados': report.totalDocumentsFound,
    'Docs Deletados': report.totalDocumentsDeleted,
    'Erros': report.totalErrors,
    'Tempo': `${(report.executionTime / 1000).toFixed(2)}s`
  })
  
  return report
}

// 6. Monitoramento de progresso em tempo real
export async function monitoredReset() {
  console.log('üìä Reset com monitoramento...')
  
  const startTime = Date.now()
  
  // Verificar status inicial
  const initialStatus = await StudentDataResetScript.getSystemStatus()
  console.log(`üìà Status inicial: ${initialStatus.totalStudentData} documentos`)
  
  // Executar reset
  const report = await StudentDataResetScript.executeQuickReset(false)
  
  // Verificar status final
  const finalStatus = await StudentDataResetScript.getSystemStatus()
  console.log(`üìâ Status final: ${finalStatus.totalStudentData} documentos`)
  
  // M√©tricas
  const totalTime = Date.now() - startTime
  const docsPerSecond = report.totalDocumentsDeleted / (totalTime / 1000)
  
  console.log('üìä M√©tricas de performance:')
  console.table({
    'Documentos deletados': report.totalDocumentsDeleted,
    'Tempo total': `${(totalTime / 1000).toFixed(2)}s`,
    'Docs/segundo': docsPerSecond.toFixed(2),
    'Efici√™ncia': report.totalErrors === 0 ? '100%' : `${((report.totalDocumentsDeleted / report.totalDocumentsFound) * 100).toFixed(1)}%`
  })
  
  return { report, metrics: { totalTime, docsPerSecond } }
}

/**
 * üéØ UTILIDADES E HELPERS
 */

// 7. Gerar relat√≥rio de pr√©-execu√ß√£o
export async function generatePreExecutionReport() {
  console.log('üìã Gerando relat√≥rio de pr√©-execu√ß√£o...')
  
  const [status, dependencies, dryRun] = await Promise.all([
    StudentDataResetScript.getSystemStatus(),
    StudentDataResetScript.checkDependencies(),
    StudentDataResetScript.executeQuickReset(true)
  ])
  
  const report = {
    timestamp: new Date().toISOString(),
    systemStatus: status,
    dependencies: dependencies,
    dryRunResults: dryRun,
    readinessScore: calculateReadinessScore(status, dependencies, dryRun),
    recommendation: generateRecommendation(status, dependencies, dryRun)
  }
  
  console.log('üìã Relat√≥rio de pr√©-execu√ß√£o:')
  console.log(`üéØ Score de prontid√£o: ${report.readinessScore}/100`)
  console.log(`üí° Recomenda√ß√£o: ${report.recommendation}`)
  
  return report
}

// 8. Calcular score de prontid√£o do sistema
function calculateReadinessScore(status: any, deps: any, dryRun: any): number {
  let score = 0
  
  // Sistema saud√°vel (30 pontos)
  if (status.systemHealth === 'healthy') score += 30
  else if (status.systemHealth === 'warning') score += 15
  
  // Firebase e permiss√µes OK (25 pontos)
  if (deps.firebaseConnected) score += 15
  if (deps.permissionsOk) score += 10
  
  // Dry run sem erros (25 pontos)
  if (dryRun.totalErrors === 0) score += 25
  else if (dryRun.totalErrors < 3) score += 15
  
  // Dados para processar (20 pontos)
  if (dryRun.totalDocumentsFound > 0) score += 20
  
  return Math.min(100, score)
}

// 9. Gerar recomenda√ß√£o baseada no score
function generateRecommendation(status: any, deps: any, dryRun: any): string {
  const score = calculateReadinessScore(status, deps, dryRun)
  
  if (score >= 90) {
    return '‚úÖ EXECUTE: Sistema pronto para reset'
  } else if (score >= 70) {
    return '‚ö†Ô∏è CUIDADO: Execute com monitoramento'
  } else if (score >= 50) {
    return 'üîß CORRIJA: Resolver problemas antes de executar'
  } else {
    return 'üö® N√ÉO EXECUTE: Sistema n√£o est√° pronto'
  }
}

/**
 * üéØ COMANDOS R√ÅPIDOS PARA CONSOLE
 */

// Para usar no console do navegador:
export const QuickCommands = {
  // Verificar status
  async status() {
    return await StudentDataResetScript.getSystemStatus()
  },
  
  // Teste r√°pido
  async test() {
    return await StudentDataResetScript.runComprehensiveTest()
  },
  
  // Dry run
  async dryRun() {
    return await StudentDataResetScript.executeQuickReset(true)
  },
  
  // Reset real (com confirma√ß√£o)
  async reset() {
    const confirmed = confirm('üö® ATEN√á√ÉO: Esta opera√ß√£o ir√° DELETAR todos os dados dos estudantes! Confirma?')
    if (!confirmed) return 'Cancelado pelo usu√°rio'
    
    return await StudentDataResetScript.executeQuickReset(false)
  }
}

// Disponibilizar no console global
if (typeof window !== 'undefined') {
  (window as any).ResetCommands = QuickCommands
  console.log('üéÆ Comandos dispon√≠veis no console:')
  console.log('  ResetCommands.status() - Verificar status')
  console.log('  ResetCommands.test() - Teste completo')
  console.log('  ResetCommands.dryRun() - Simular reset')
  console.log('  ResetCommands.reset() - Executar reset REAL')
}

export default {
  checkSystemStatus,
  runFullTest,
  executeResetWithBackup,
  checkDependencies,
  customReset,
  monitoredReset,
  generatePreExecutionReport,
  QuickCommands
}