'use client'

import React, { useState } from 'react'
import { Target, Users, Calculator, TrendingUp, CheckCircle } from 'lucide-react'
import { Card, CardHeader } from '@/components/ui/Card'
import { GameBase, GameState } from './GameBase'
import { PreGameEducation } from './PreGameEducation'
import { MatchingGame } from './interactive/MatchingGame'

interface TestMatchingScenario {
  id: number
  level: 'muito-facil' | 'facil' | 'medio' | 'dificil' | 'muito-dificil'
  title: string
  instruction: string
  items: Array<{
    id: string
    content: string
    type: 'concept' | 'example'
    matchId: string
    explanation: string
    dailyLifeAnalogy?: string
    icon?: React.ReactNode
  }>
}

const matchingScenarios: TestMatchingScenario[] = [
  {
    id: 1,
    level: 'muito-facil',
    title: 'Testes B√°sicos - Quando Usar Cada Um?',
    instruction: 'Conecte cada situa√ß√£o com o teste estat√≠stico mais apropriado',
    items: [
      {
        id: 'ttest-concept',
        content: 'Teste t',
        type: 'concept',
        matchId: 'ttest',
        explanation: 'O teste t compara m√©dias entre grupos. √â como comparar se duas turmas t√™m notas diferentes.',
        dailyLifeAnalogy: 'Comparar a altura m√©dia de homens e mulheres',
        icon: <Calculator className="w-4 h-4" />
      },
      {
        id: 'ttest-example',
        content: 'Comparar o peso antes e depois de uma dieta em 30 pessoas',
        type: 'example',
        matchId: 'ttest',
        explanation: 'Teste t pareado - compara o mesmo grupo em dois momentos diferentes',
        dailyLifeAnalogy: 'Como comparar seu peso antes e depois das f√©rias'
      },
      {
        id: 'chisquare-concept',
        content: 'Teste Qui-quadrado',
        type: 'concept',
        matchId: 'chisquare',
        explanation: 'Testa se duas caracter√≠sticas est√£o relacionadas. Como ver se sexo e prefer√™ncia por esporte est√£o ligados.',
        dailyLifeAnalogy: 'Ver se homens e mulheres preferem esportes diferentes',
        icon: <Target className="w-4 h-4" />
      },
      {
        id: 'chisquare-example',
        content: 'Verificar se h√° rela√ß√£o entre sexo e prefer√™ncia por tipo de exerc√≠cio (aer√≥bico vs muscula√ß√£o)',
        type: 'example',
        matchId: 'chisquare',
        explanation: 'Qui-quadrado de independ√™ncia - testa associa√ß√£o entre duas vari√°veis categ√≥ricas',
        dailyLifeAnalogy: 'Como ver se idade influencia na escolha do sabor de sorvete'
      },
      {
        id: 'correlation-concept',
        content: 'Correla√ß√£o',
        type: 'concept',
        matchId: 'correlation',
        explanation: 'Mede se duas coisas aumentam ou diminuem juntas. Como altura e peso.',
        dailyLifeAnalogy: 'Ver se pessoas mais altas tendem a pesar mais',
        icon: <TrendingUp className="w-4 h-4" />
      },
      {
        id: 'correlation-example',
        content: 'Analisar a rela√ß√£o entre horas de treino por semana e performance atl√©tica',
        type: 'example',
        matchId: 'correlation',
        explanation: 'Correla√ß√£o de Pearson ou Spearman - mede for√ßa da rela√ß√£o linear entre vari√°veis',
        dailyLifeAnalogy: 'Como ver se mais horas estudando = notas melhores'
      }
    ]
  },
  {
    id: 2,
    level: 'facil',
    title: 'Cohen\'s Kappa - Quando Dois Avaliadores Concordam?',
    instruction: 'Identifique situa√ß√µes onde o Kappa de Cohen √© o teste apropriado',
    items: [
      {
        id: 'kappa-concept',
        content: 'Kappa de Cohen',
        type: 'concept',
        matchId: 'kappa',
        explanation: 'Mede o quanto dois avaliadores concordam, descontando a concord√¢ncia por acaso.',
        dailyLifeAnalogy: 'Como dois professores corrigindo a mesma prova',
        icon: <Users className="w-4 h-4" />
      },
      {
        id: 'kappa-example1',
        content: 'Dois nutricionistas classificando pacientes como "desnutrido" ou "bem nutrido"',
        type: 'example',
        matchId: 'kappa',
        explanation: 'Kappa mede se os dois profissionais chegam √†s mesmas conclus√µes mais do que seria esperado por sorte',
        dailyLifeAnalogy: 'Como dois m√©dicos diagnosticando a mesma doen√ßa'
      },
      {
        id: 'agreement-concept',
        content: 'Concord√¢ncia Simples',
        type: 'concept',
        matchId: 'simple-agreement',
        explanation: 'Apenas conta quantas vezes os avaliadores concordaram, sem considerar o acaso.',
        dailyLifeAnalogy: 'Contar quantas vezes dois amigos escolhem o mesmo filme',
        icon: <CheckCircle className="w-4 h-4" />
      },
      {
        id: 'agreement-example',
        content: 'Calcular quantos % das vezes dois treinadores d√£o a mesma nota para um exerc√≠cio',
        type: 'example',
        matchId: 'simple-agreement',
        explanation: 'Concord√¢ncia percentual simples - n√£o considera que algumas concord√¢ncias podem ser por acaso',
        dailyLifeAnalogy: 'Como contar quantas vezes voc√™ e seu amigo escolhem a mesma pizza'
      }
    ]
  }
]

// Educational content for pre-game learning
const educationalSections = [
  {
    title: "Como Escolher o Teste Certo? - Guia para Iniciantes",
    content: (
      <div className="space-y-4">
        <p>ü§î <strong>Escolher o teste estat√≠stico certo √© como escolher a ferramenta certa:</strong></p>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="p-4 bg-blue-50 rounded-lg">
            <h4 className="font-semibold text-blue-800 mb-2">üî® Para Comparar Grupos</h4>
            <ul className="text-blue-700 text-sm space-y-1">
              <li><strong>Teste t:</strong> Comparar m√©dias (ex: peso antes/depois)</li>
              <li><strong>ANOVA:</strong> Comparar 3+ grupos (ex: 3 dietas diferentes)</li>
              <li><strong>Qui-quadrado:</strong> Comparar categorias (ex: sexo vs esporte)</li>
            </ul>
          </div>
          
          <div className="p-4 bg-green-50 rounded-lg">
            <h4 className="font-semibold text-green-800 mb-2">üìä Para Medir Rela√ß√µes</h4>
            <ul className="text-green-700 text-sm space-y-1">
              <li><strong>Correla√ß√£o:</strong> Se duas coisas variam juntas</li>
              <li><strong>Regress√£o:</strong> Prever uma coisa pela outra</li>
              <li><strong>Kappa:</strong> Se dois avaliadores concordam</li>
            </ul>
          </div>
        </div>
        
        <p>üí° <strong>Dica de ouro:</strong> Sempre pergunte "O que eu quero descobrir?" antes de escolher o teste!</p>
      </div>
    ),
    concepts: [
      {
        term: "Teste Estat√≠stico",
        definition: "Ferramenta matem√°tica para responder perguntas sobre dados",
        example: "Teste t para ver se uma dieta funciona"
      },
      {
        term: "Vari√°vel",
        definition: "Caracter√≠stica que pode mudar (idade, peso, sexo, etc.)",
        example: "Peso corporal, tipo de exerc√≠cio preferido"
      }
    ]
  },
  {
    title: "Kappa de Cohen - Medindo Concord√¢ncia",
    content: (
      <div className="space-y-4">
        <p>üë• <strong>Imagine dois professores corrigindo a mesma prova:</strong></p>
        
        <div className="p-4 bg-yellow-50 rounded-lg">
          <h4 className="font-semibold text-yellow-800 mb-2">üéØ O Problema</h4>
          <p className="text-yellow-700 text-sm mb-2">
            Se eles concordam 80% das vezes, isso √© bom? Depende! Se a prova s√≥ tem "certo" ou "errado", 
            eles podem concordar 50% das vezes s√≥ por sorte.
          </p>
        </div>
        
        <div className="p-4 bg-green-50 rounded-lg">
          <h4 className="font-semibold text-green-800 mb-2">‚úÖ A Solu√ß√£o: Kappa</h4>
          <p className="text-green-700 text-sm">
            O Kappa desconta a concord√¢ncia que seria esperada por acaso. 
            Kappa = 0 significa "s√≥ concordam por sorte", Kappa = 1 significa "concord√¢ncia perfeita".
          </p>
        </div>
        
        <p>üè† <strong>Exemplos do dia a dia:</strong></p>
        <ul className="list-disc list-inside ml-4 space-y-1 text-sm">
          <li>Dois m√©dicos diagnosticando a mesma doen√ßa</li>
          <li>Dois ju√≠zes avaliando uma apresenta√ß√£o</li>
          <li>Dois nutricionistas classificando dietas</li>
        </ul>
      </div>
    ),
    concepts: [
      {
        term: "Kappa de Cohen",
        definition: "Medida de concord√¢ncia entre avaliadores que desconta o acaso",
        symbol: "Œ∫ (kappa)",
        example: "Œ∫ = 0.8 indica excelente concord√¢ncia entre dois nutricionistas"
      },
      {
        term: "Concord√¢ncia por Acaso",
        definition: "Quanto os avaliadores concordariam apenas por sorte",
        example: "Em diagn√≥stico sim/n√£o, concordariam 50% por acaso"
      }
    ]
  }
]

interface Game35StatisticalTestMatchingProps {
  onBack: () => void
  onComplete: (score: number, timeElapsed: number) => void
}

export function Game35StatisticalTestMatching({ onBack, onComplete }: Game35StatisticalTestMatchingProps) {
  const [gameState, setGameState] = useState<GameState>({
    currentQuestion: 0,
    currentLevel: 'muito-facil',
    score: 0,
    answers: [],
    timeElapsed: 0,
    isCompleted: false,
    feedback: [],
    showEducation: true
  })

  const handleStartGame = () => {
    setGameState(prev => ({ ...prev, showEducation: false }))
  }

  const currentScenario = matchingScenarios[gameState.currentQuestion]

  const handleMatchingComplete = (correct: boolean, score: number) => {
    const newAnswers = [...gameState.answers, {
      questionId: currentScenario.id,
      selectedAnswer: correct ? 1 : 0,
      isCorrect: correct,
      points: score
    }]

    setGameState(prev => ({
      ...prev,
      score: prev.score + score,
      answers: newAnswers
    }))

    // Move to next scenario or complete game
    setTimeout(() => {
      if (gameState.currentQuestion < matchingScenarios.length - 1) {
        setGameState(prev => ({
          ...prev,
          currentQuestion: prev.currentQuestion + 1
        }))
      } else {
        setGameState(prev => ({
          ...prev,
          isCompleted: true
        }))
      }
    }, 2000)
  }

  const educationComponent = (
    <PreGameEducation
      gameTitle="Sele√ß√£o de Testes Estat√≠sticos"
      gameDescription="Aprenda a escolher o teste estat√≠stico correto para cada situa√ß√£o atrav√©s de jogos de associa√ß√£o"
      sections={educationalSections}
      onStartGame={handleStartGame}
      estimatedReadTime={8}
    />
  )

  if (gameState.showEducation) {
    return educationComponent
  }

  return (
    <GameBase
      gameId={35}
      onBack={onBack}
      onComplete={onComplete}
      gameState={gameState}
      onGameStateChange={setGameState}
      totalQuestions={matchingScenarios.length}
      educationComponent={educationComponent}
      showLevelIndicator={true}
    >
      <div className="space-y-6">
        {/* Progress Indicator */}
        <Card>
          <CardHeader>
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-semibold">
                Cen√°rio {gameState.currentQuestion + 1} de {matchingScenarios.length}
              </h3>
              <div className="text-sm text-gray-600">
                N√≠vel: {currentScenario.level.replace('-', ' ')}
              </div>
            </div>
          </CardHeader>
        </Card>

        {/* Matching Game */}
        <MatchingGame
          title={currentScenario.title}
          instruction={currentScenario.instruction}
          items={currentScenario.items}
          onComplete={handleMatchingComplete}
          showAnalogies={true}
        />
      </div>
    </GameBase>
  )
}
