'use client'

import React, { useState } from 'react'
import { motion } from 'framer-motion'
import { CheckCircle, XCircle, Users } from 'lucide-react'
import { Card, CardContent, CardHeader } from '@/components/ui/Card'
import { Button } from '@/components/ui/Button'
import { GameBase, GameState } from './GameBase'
import { PreGameEducation } from './PreGameEducation'

interface SamplingScenario {
  id: number
  level: 'muito-facil' | 'facil' | 'medio' | 'dificil' | 'muito-dificil'
  title: string
  description: string
  context: string
  question: string
  options: string[]
  correctAnswer: number
  explanation: string
  dailyLifeAnalogy: string
}

const scenarios: SamplingScenario[] = [
  {
    id: 1,
    level: 'muito-facil',
    title: "Popula√ß√£o vs Amostra - Escola",
    description: "A diretora quer saber a opini√£o dos alunos sobre a merenda escolar",
    context: "A escola tem 1000 alunos. A diretora perguntou para 50 alunos escolhidos aleatoriamente o que acham da merenda.",
    question: "Neste exemplo, qual √© a POPULA√á√ÉO e qual √© a AMOSTRA?",
    options: [
      "Popula√ß√£o: 1000 alunos da escola / Amostra: 50 alunos entrevistados",
      "Popula√ß√£o: 50 alunos entrevistados / Amostra: 1000 alunos da escola",
      "Popula√ß√£o e amostra s√£o a mesma coisa",
      "N√£o h√° diferen√ßa entre popula√ß√£o e amostra neste caso"
    ],
    correctAnswer: 0,
    explanation: "A POPULA√á√ÉO s√£o TODOS os 1000 alunos da escola (o grupo completo que queremos estudar). A AMOSTRA s√£o os 50 alunos entrevistados (uma parte da popula√ß√£o que realmente estudamos).",
    dailyLifeAnalogy: "√â como provar uma colherada de sopa para saber se est√° salgada. A panela inteira √© a popula√ß√£o, a colherada √© a amostra!"
  },
  {
    id: 2,
    level: 'facil',
    title: "Representatividade - Supermercado",
    description: "Um supermercado quer saber a satisfa√ß√£o dos clientes",
    context: "O supermercado entrevistou apenas clientes que compravam na segunda-feira de manh√£, entre 8h e 10h.",
    question: "Esta amostra representa bem TODOS os clientes do supermercado?",
    options: [
      "Sim, porque entrevistaram muitas pessoas",
      "N√£o, porque s√≥ entrevistaram um tipo espec√≠fico de cliente",
      "Sim, porque segunda-feira √© um dia normal",
      "N√£o importa quando entrevistar"
    ],
    correctAnswer: 1,
    explanation: "Esta amostra N√ÉO √© representativa! Clientes de segunda de manh√£ podem ser diferentes (aposentados, pessoas que trabalham em casa, etc.). Uma boa amostra deve incluir diferentes tipos de clientes.",
    dailyLifeAnalogy: "√â como perguntar s√≥ para crian√ßas qual o melhor filme do ano. A opini√£o das crian√ßas n√£o representa a opini√£o de TODOS!"
  },
  {
    id: 3,
    level: 'medio',
    title: "Vi√©s de Sele√ß√£o - Academia",
    description: "Uma academia quer saber se seus alunos est√£o satisfeitos",
    context: "A academia enviou um question√°rio por email e apenas 30% responderam. A maioria das respostas foi muito positiva.",
    question: "Por que estes resultados podem n√£o representar a opini√£o real de todos os alunos?",
    options: [
      "30% √© uma amostra grande o suficiente",
      "Quem responde voluntariamente pode ter opini√µes diferentes de quem n√£o responde",
      "Email √© a melhor forma de coletar dados",
      "Resultados positivos sempre s√£o confi√°veis"
    ],
    correctAnswer: 1,
    explanation: "Existe VI√âS DE SELE√á√ÉO! Pessoas que respondem voluntariamente podem ser diferentes das que n√£o respondem. Talvez quem est√° satisfeito tenha mais vontade de responder, ou quem est√° insatisfeito n√£o queira perder tempo.",
    dailyLifeAnalogy: "√â como perguntar 'quem quer pizza?' numa festa. S√≥ quem gosta de pizza vai levantar a m√£o, mas isso n√£o significa que TODOS gostam!"
  }
]

// Educational content for pre-game learning
const educationalSections = [
  {
    title: "Popula√ß√£o vs Amostra - Como uma Festa",
    content: (
      <div className="space-y-4">
        <p>üéâ <strong>Imagine uma festa com 100 pessoas:</strong></p>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
          <div className="p-4 bg-blue-50 rounded-lg">
            <h4 className="font-semibold text-blue-800 mb-2">üë• Popula√ß√£o</h4>
            <p className="text-blue-700 mb-2">TODAS as 100 pessoas na festa</p>
            <p className="text-sm text-blue-600">√â o grupo COMPLETO que voc√™ quer estudar</p>
          </div>
          
          <div className="p-4 bg-green-50 rounded-lg">
            <h4 className="font-semibold text-green-800 mb-2">üéØ Amostra</h4>
            <p className="text-green-700 mb-2">10 pessoas que voc√™ escolheu para conversar</p>
            <p className="text-sm text-green-600">√â uma PARTE da popula√ß√£o que voc√™ realmente estuda</p>
          </div>
        </div>
        
        <p>ü§î <strong>Por que usar amostra?</strong> Porque √© imposs√≠vel ou muito caro estudar TODA a popula√ß√£o. Imagine entrevistar todos os brasileiros!</p>
      </div>
    ),
    concepts: [
      {
        term: "Popula√ß√£o",
        definition: "Todos os indiv√≠duos ou elementos que queremos estudar",
        example: "Todos os estudantes universit√°rios do Brasil"
      },
      {
        term: "Amostra",
        definition: "Uma parte da popula√ß√£o que realmente estudamos",
        example: "500 estudantes universit√°rios escolhidos para uma pesquisa"
      }
    ]
  },
  {
    title: "Amostra Representativa - Como Escolher Bem",
    content: (
      <div className="space-y-4">
        <p>üéØ <strong>Uma boa amostra √© como um mini-retrato da popula√ß√£o:</strong></p>
        
        <p>‚úÖ <strong>Amostra BOA (Representativa):</strong></p>
        <ul className="list-disc list-inside ml-4 space-y-1">
          <li>Inclui diferentes tipos de pessoas</li>
          <li>√â escolhida aleatoriamente</li>
          <li>Tem tamanho adequado</li>
        </ul>
        
        <p>‚ùå <strong>Amostra RUIM (N√£o representativa):</strong></p>
        <ul className="list-disc list-inside ml-4 space-y-1">
          <li>S√≥ inclui um tipo de pessoa</li>
          <li>√â escolhida por conveni√™ncia</li>
          <li>Tem vi√©s de sele√ß√£o</li>
        </ul>
        
        <p>üè† <strong>Exemplo do dia a dia:</strong> Para saber se um bolo est√° bom, voc√™ prova um pedacinho de diferentes partes, n√£o s√≥ da beirada!</p>
      </div>
    ),
    concepts: [
      {
        term: "Representatividade",
        definition: "Quando a amostra reflete bem as caracter√≠sticas da popula√ß√£o",
        example: "Uma pesquisa eleitoral que inclui pessoas de todas as idades e classes sociais"
      },
      {
        term: "Vi√©s de Sele√ß√£o",
        definition: "Quando a forma de escolher a amostra favorece certos tipos de pessoas",
        example: "Pesquisar s√≥ pessoas que t√™m telefone fixo (exclui jovens)"
      }
    ]
  }
]

interface Game12SamplingPopulationProps {
  onBack: () => void
  onComplete: (score: number, timeElapsed: number) => void
}

export function Game12SamplingPopulation({ onBack, onComplete }: Game12SamplingPopulationProps) {
  const [gameState, setGameState] = useState<GameState>({
    currentQuestion: 0,
    currentLevel: 'muito-facil',
    score: 0,
    answers: [],
    timeElapsed: 0,
    isCompleted: false,
    feedback: [],
    showEducation: true
  })
  
  const [selectedAnswer, setSelectedAnswer] = useState<number | null>(null)
  const [showFeedback, setShowFeedback] = useState(false)

  const handleStartGame = () => {
    setGameState(prev => ({ ...prev, showEducation: false }))
  }

  const currentScenario = scenarios[gameState.currentQuestion]

  const handleAnswerSelect = (answerIndex: number) => {
    if (showFeedback) return
    setSelectedAnswer(answerIndex)
  }

  const handleSubmitAnswer = () => {
    if (selectedAnswer === null) return

    const isCorrect = selectedAnswer === currentScenario.correctAnswer
    const points = isCorrect ? 35 : 0

    const newAnswers = [...gameState.answers, {
      questionId: currentScenario.id,
      selectedAnswer,
      isCorrect,
      points
    }]

    setGameState(prev => ({
      ...prev,
      score: prev.score + points,
      answers: newAnswers
    }))

    setShowFeedback(true)
  }

  const handleNextQuestion = () => {
    if (gameState.currentQuestion < scenarios.length - 1) {
      setGameState(prev => ({
        ...prev,
        currentQuestion: prev.currentQuestion + 1
      }))
      setSelectedAnswer(null)
      setShowFeedback(false)
    } else {
      setGameState(prev => ({
        ...prev,
        isCompleted: true
      }))
    }
  }

  const educationComponent = (
    <PreGameEducation
      gameTitle="Amostragem e Popula√ß√£o"
      gameDescription="Entenda a diferen√ßa entre popula√ß√£o e amostra usando exemplos pr√°ticos do dia a dia"
      sections={educationalSections}
      onStartGame={handleStartGame}
      estimatedReadTime={6}
    />
  )

  if (gameState.showEducation) {
    return educationComponent
  }

  return (
    <GameBase
      gameId={12}
      onBack={onBack}
      onComplete={onComplete}
      gameState={gameState}
      onGameStateChange={setGameState}
      totalQuestions={scenarios.length}
      educationComponent={educationComponent}
      showLevelIndicator={true}
    >
      <div className="space-y-6">
        {/* Scenario Header */}
        <Card>
          <CardHeader>
            <div className="flex items-center space-x-3">
              <Users className="w-6 h-6 text-blue-600" />
              <div>
                <h3 className="text-lg font-semibold">{currentScenario.title}</h3>
                <p className="text-sm text-gray-600">N√≠vel: {currentScenario.level.replace('-', ' ')}</p>
              </div>
            </div>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <p className="text-gray-700">{currentScenario.description}</p>
              <div className="p-4 bg-blue-50 rounded-lg">
                <p className="text-blue-800"><strong>Situa√ß√£o:</strong> {currentScenario.context}</p>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Question */}
        <Card>
          <CardHeader>
            <h3 className="text-lg font-semibold">Quest√£o {gameState.currentQuestion + 1}</h3>
          </CardHeader>
          <CardContent>
            <p className="text-gray-700 mb-4">{currentScenario.question}</p>
            
            <div className="space-y-3">
              {currentScenario.options.map((option, index) => (
                <motion.button
                  key={index}
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                  onClick={() => handleAnswerSelect(index)}
                  disabled={showFeedback}
                  className={`w-full p-4 text-left rounded-lg border-2 transition-all ${
                    selectedAnswer === index
                      ? showFeedback
                        ? index === currentScenario.correctAnswer
                          ? 'border-green-500 bg-green-50'
                          : 'border-red-500 bg-red-50'
                        : 'border-blue-500 bg-blue-50'
                      : showFeedback && index === currentScenario.correctAnswer
                        ? 'border-green-500 bg-green-50'
                        : 'border-gray-200 hover:border-gray-300'
                  }`}
                >
                  <div className="flex items-center space-x-3">
                    <span className="flex-shrink-0 w-6 h-6 rounded-full border-2 border-current flex items-center justify-center text-sm font-medium">
                      {String.fromCharCode(65 + index)}
                    </span>
                    <span>{option}</span>
                    {showFeedback && selectedAnswer === index && (
                      index === currentScenario.correctAnswer ? (
                        <CheckCircle className="w-5 h-5 text-green-600 ml-auto" />
                      ) : (
                        <XCircle className="w-5 h-5 text-red-600 ml-auto" />
                      )
                    )}
                    {showFeedback && selectedAnswer !== index && index === currentScenario.correctAnswer && (
                      <CheckCircle className="w-5 h-5 text-green-600 ml-auto" />
                    )}
                  </div>
                </motion.button>
              ))}
            </div>

            {/* Action Buttons */}
            <div className="flex justify-between mt-6">
              <div></div>
              {!showFeedback ? (
                <Button
                  onClick={handleSubmitAnswer}
                  disabled={selectedAnswer === null}
                >
                  Confirmar Resposta
                </Button>
              ) : (
                <Button onClick={handleNextQuestion}>
                  {gameState.currentQuestion < scenarios.length - 1 ? 'Pr√≥xima Quest√£o' : 'Finalizar Jogo'}
                </Button>
              )}
            </div>
          </CardContent>
        </Card>

        {/* Feedback */}
        {showFeedback && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.3 }}
            className="space-y-4"
          >
            <Card>
              <CardHeader>
                <h3 className="text-lg font-semibold text-blue-600">üí° Explica√ß√£o</h3>
              </CardHeader>
              <CardContent>
                <p className="text-gray-700 mb-3">{currentScenario.explanation}</p>
                <div className="p-3 bg-yellow-50 rounded-lg">
                  <p className="text-yellow-800"><strong>üè† Analogia do dia a dia:</strong> {currentScenario.dailyLifeAnalogy}</p>
                </div>
              </CardContent>
            </Card>
          </motion.div>
        )}
      </div>
    </GameBase>
  )
}
