/**
 * Script para listar estudantes usando Firebase Admin SDK
 * Mostra informa√ß√µes detalhadas dos estudantes cadastrados
 */

const admin = require('firebase-admin');
const path = require('path');

// Tentar diferentes m√©todos de autentica√ß√£o
function initializeFirebaseAdmin() {
  try {
    // M√©todo 1: Tentar usar credenciais do arquivo de servi√ßo se existir
    const serviceAccountPath = path.join(__dirname, '..', 'firebase-service-account.json');

    try {
      const serviceAccount = require(serviceAccountPath);
      admin.initializeApp({
        credential: admin.credential.cert(serviceAccount),
        projectId: 'vireiestatistica-ba7c5'
      });
      console.log('‚úÖ Firebase Admin inicializado com service account');
      return true;
    } catch (serviceAccountError) {
      console.log('‚ö†Ô∏è Service account n√£o encontrado, tentando credenciais padr√£o...');
    }

    // M√©todo 2: Usar credenciais padr√£o do ambiente
    admin.initializeApp({
      projectId: 'vireiestatistica-ba7c5'
    });
    console.log('‚úÖ Firebase Admin inicializado com credenciais padr√£o');
    return true;

  } catch (error) {
    console.error('‚ùå Erro ao inicializar Firebase Admin:', error.message);
    console.log('\nüîß SOLU√á√ïES POSS√çVEIS:');
    console.log('1. Execute: firebase login');
    console.log('2. Execute: gcloud auth application-default login');
    console.log('3. Defina GOOGLE_APPLICATION_CREDENTIALS para um arquivo de service account');
    console.log('4. Execute o script em um ambiente com credenciais configuradas');
    return false;
  }
}

if (!initializeFirebaseAdmin()) {
  process.exit(1);
}

const db = admin.firestore();

async function listStudents() {
  console.log('üë• LISTANDO ESTUDANTES NO FIREBASE');
  console.log('==================================\n');

  try {
    // 1. Buscar usu√°rios com role 'student'
    console.log('üîç 1. Buscando usu√°rios estudantes...');
    const usersSnapshot = await db.collection('users')
      .where('role', '==', 'student')
      .get();

    if (usersSnapshot.empty) {
      console.log('‚ùå Nenhum estudante encontrado na cole√ß√£o users');
    } else {
      console.log(`‚úÖ Encontrados ${usersSnapshot.size} estudantes na cole√ß√£o users\n`);
      
      console.log('üìã LISTA DE ESTUDANTES:');
      console.log('======================');
      
      usersSnapshot.forEach((doc, index) => {
        const data = doc.data();
        console.log(`\n${index + 1}. ID: ${doc.id}`);
        console.log(`   üìß Email: ${data.email || 'N/A'}`);
        console.log(`   üë§ Nome: ${data.fullName || data.name || 'N/A'}`);
        console.log(`   üè´ Institui√ß√£o: ${data.institutionId || 'N/A'}`);
        console.log(`   üéØ Pontua√ß√£o Total: ${data.totalScore || 0}`);
        console.log(`   üìä N√≠vel: ${data.levelReached || 1}`);
        console.log(`   üéÆ Jogos Completados: ${data.gamesCompleted || 0}`);
        console.log(`   üÜî ID An√¥nimo: ${data.anonymousId || 'N/A'}`);
        console.log(`   üìÖ Criado em: ${data.createdAt || 'N/A'}`);
        console.log(`   üîß Setup: ${data.setupBy || 'Manual'}`);
        if (data.authProvider) {
          console.log(`   üîê Provedor Auth: ${data.authProvider}`);
        }
      });
    }

    // 2. Buscar estudantes matriculados em turmas
    console.log('\n\nüè´ 2. Buscando estudantes matriculados em turmas...');
    const classStudentsSnapshot = await db.collection('classStudents').get();

    if (classStudentsSnapshot.empty) {
      console.log('‚ùå Nenhum estudante encontrado na cole√ß√£o classStudents');
    } else {
      console.log(`‚úÖ Encontrados ${classStudentsSnapshot.size} registros na cole√ß√£o classStudents\n`);
      
      // Agrupar por turma
      const classesByClass = {};
      classStudentsSnapshot.forEach((doc) => {
        const data = doc.data();
        const classId = data.classId || 'Sem turma';
        
        if (!classesByClass[classId]) {
          classesByClass[classId] = [];
        }
        
        classesByClass[classId].push({
          id: doc.id,
          ...data
        });
      });

      console.log('üìö ESTUDANTES POR TURMA:');
      console.log('========================');
      
      Object.keys(classesByClass).forEach((classId) => {
        const students = classesByClass[classId];
        console.log(`\nüè´ Turma: ${classId}`);
        console.log(`   üë• Total de estudantes: ${students.length}`);
        
        students.forEach((student, index) => {
          console.log(`   ${index + 1}. ${student.studentName || 'Nome n√£o informado'}`);
          console.log(`      üìß Email: ${student.email || 'N/A'}`);
          console.log(`      üÜî Student ID: ${student.studentId || 'N/A'}`);
          console.log(`      üìä Status: ${student.status || 'N/A'}`);
          console.log(`      ‚úÖ Ativo: ${student.isActive !== false ? 'Sim' : 'N√£o'}`);
          if (student.enrolledAt) {
            console.log(`      üìÖ Matriculado em: ${student.enrolledAt.toDate ? student.enrolledAt.toDate().toLocaleDateString() : student.enrolledAt}`);
          }
        });
      });
    }

    // 3. Verificar progresso de jogos
    console.log('\n\nüéÆ 3. Verificando progresso de jogos...');
    const gameProgressSnapshot = await db.collection('gameProgress')
      .limit(10)
      .get();

    if (!gameProgressSnapshot.empty) {
      console.log(`‚úÖ Encontrados ${gameProgressSnapshot.size} registros de progresso de jogos`);
      
      const studentsWithProgress = new Set();
      gameProgressSnapshot.forEach((doc) => {
        const data = doc.data();
        if (data.studentId) {
          studentsWithProgress.add(data.studentId);
        }
      });
      
      console.log(`   üë• Estudantes √∫nicos com progresso: ${studentsWithProgress.size}`);
    } else {
      console.log('‚ùå Nenhum progresso de jogo encontrado');
    }

    // 4. Verificar progresso de m√≥dulos
    console.log('\nüîç 4. Verificando progresso de m√≥dulos...');
    const moduleProgressSnapshot = await db.collection('student_module_progress')
      .limit(10)
      .get();

    if (!moduleProgressSnapshot.empty) {
      console.log(`‚úÖ Encontrados ${moduleProgressSnapshot.size} registros de progresso de m√≥dulos`);
      
      const studentsWithModuleProgress = new Set();
      moduleProgressSnapshot.forEach((doc) => {
        const data = doc.data();
        if (data.studentId) {
          studentsWithModuleProgress.add(data.studentId);
        }
      });
      
      console.log(`   üë• Estudantes √∫nicos com progresso de m√≥dulos: ${studentsWithModuleProgress.size}`);
    } else {
      console.log('‚ùå Nenhum progresso de m√≥dulo encontrado');
    }

    // 5. Resumo final
    console.log('\n\nüìä RESUMO GERAL:');
    console.log('================');
    console.log(`üë• Total de usu√°rios estudantes: ${usersSnapshot.size}`);
    console.log(`üè´ Total de matr√≠culas em turmas: ${classStudentsSnapshot.size}`);
    
    // Verificar se h√° estudantes ativos
    const activeStudents = [];
    classStudentsSnapshot.forEach((doc) => {
      const data = doc.data();
      if (data.isActive !== false && data.status !== 'rejected') {
        activeStudents.push(data);
      }
    });
    
    console.log(`‚úÖ Estudantes ativos em turmas: ${activeStudents.length}`);
    
    if (activeStudents.length > 0) {
      console.log('\nüéØ PR√ìXIMOS PASSOS:');
      console.log('==================');
      console.log('‚úÖ H√° estudantes cadastrados e ativos');
      console.log('üìä Voc√™ pode gerar rankings e relat√≥rios');
      console.log('üéÆ Verifique se h√° atividades completadas para an√°lises');
    } else {
      console.log('\n‚ö†Ô∏è ATEN√á√ÉO:');
      console.log('===========');
      console.log('‚ùå Poucos ou nenhum estudante ativo encontrado');
      console.log('üìù Considere verificar o processo de matr√≠cula');
      console.log('üîß Verifique se os estudantes est√£o sendo aceitos nas turmas');
    }

  } catch (error) {
    console.error('‚ùå Erro ao listar estudantes:', error);
  }
}

// Executar o script
listStudents().then(() => {
  console.log('\n‚úÖ Listagem completa');
  process.exit(0);
}).catch(error => {
  console.error('‚ùå Erro na execu√ß√£o:', error);
  process.exit(1);
});
